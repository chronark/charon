// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/filecache/proto/filecache/filecache.proto

package filecache

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FilecacheService service

type FilecacheService interface {
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type filecacheService struct {
	c    client.Client
	name string
}

func NewFilecacheService(name string, c client.Client) FilecacheService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "filecache"
	}
	return &filecacheService{
		c:    c,
		name: name,
	}
}

func (c *filecacheService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "FilecacheService.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecacheService) Set(ctx context.Context, in *SetRequest, opts ...client.CallOption) (*SetResponse, error) {
	req := c.c.NewRequest(c.name, "FilecacheService.Set", in)
	out := new(SetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecacheService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FilecacheService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FilecacheService service

type FilecacheServiceHandler interface {
	Get(context.Context, *GetRequest, *GetResponse) error
	Set(context.Context, *SetRequest, *SetResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterFilecacheServiceHandler(s server.Server, hdlr FilecacheServiceHandler, opts ...server.HandlerOption) error {
	type filecacheService interface {
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		Set(ctx context.Context, in *SetRequest, out *SetResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type FilecacheService struct {
		filecacheService
	}
	h := &filecacheServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FilecacheService{h}, opts...))
}

type filecacheServiceHandler struct {
	FilecacheServiceHandler
}

func (h *filecacheServiceHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.FilecacheServiceHandler.Get(ctx, in, out)
}

func (h *filecacheServiceHandler) Set(ctx context.Context, in *SetRequest, out *SetResponse) error {
	return h.FilecacheServiceHandler.Set(ctx, in, out)
}

func (h *filecacheServiceHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.FilecacheServiceHandler.Delete(ctx, in, out)
}
